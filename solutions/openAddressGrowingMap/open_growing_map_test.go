// This file had been automatically generated by utility "git.dx.center/trafficstars/testJob0/internal/benchmarkCodeGen"

package openAddressGrowingMap

import (
	"testing"

	benchmark "git.dx.center/trafficstars/testJob0/internal/benchmarkRoutines"
	"git.dx.center/trafficstars/testJob0/internal/routines"
)

func TestMap(t *testing.T) {
	benchmark.DoTest(t, NewHashMap, routines.HashFunc)
}


func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 16, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 16, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 16, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 512, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 512, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 512, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 16, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 16, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 16, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 512, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 512, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 512, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 16, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 16, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 16, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 512, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 512, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 512, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 512, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 512, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 512, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Set_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Set_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Set_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Set_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Set_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 16, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 16, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 16, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 16, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 16, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 512, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 512, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 512, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 512, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 512, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 65536, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 65536, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 65536, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 16, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 16, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 16, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 16, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 16, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 512, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 512, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 512, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 512, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 512, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 65536, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 65536, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 65536, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 64, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 16, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 16, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 16, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 16, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 16, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 512, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 512, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 512, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 512, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 512, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 65536, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 65536, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 65536, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 128, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 512, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 512, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 512, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 512, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 512, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_ReSet_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_ReSet_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_ReSet_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_ReSet_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_ReSet_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 16, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 16, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 16, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 512, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 512, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 512, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 16, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 16, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 16, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 512, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 512, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 512, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 64, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 16, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 16, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 16, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 512, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 512, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 512, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 128, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 512, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 512, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 512, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 1024, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Get_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Get_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Get_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Get_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Get_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_GetMiss_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_GetMiss_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_GetMiss_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_GetMiss_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_GetMiss_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 16, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 16, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 16, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 512, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 512, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 512, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 16, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 16, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 16, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 512, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 512, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 512, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 64, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 16, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 16, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 16, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 16, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 16, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 512, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 512, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 512, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 128, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 512, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 512, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 512, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 512, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 512, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 65536, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 65536, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 65536, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 1024, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_Unset_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_Unset_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_Unset_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_Unset_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_Unset_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 16, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 512, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 16, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 512, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 64, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 16, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 512, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 128, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 512, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 65536, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 1024, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 4194304, 1048576, "struct")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "int")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "string")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "slice")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "map")
}

func Benchmark_openAddressGrowingMap_UnsetMiss_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, routines.HashFunc, 16777216, 1048576, "struct")
}
