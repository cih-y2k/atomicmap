
// This file had been automatically generated by utility "git.dx.center/trafficstars/testJob0/internal/benchmarkCodeGen"

package openAddressGrowingMap

import (
	"testing"

	benchmark "git.dx.center/trafficstars/testJob0/internal/benchmarkRoutines"
)

func TestMap(t *testing.T) {
	benchmark.DoTest(t, NewHashMap)
}

func BenchmarkSetString_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, true)
}

func BenchmarkSetInt_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, false)
}

func BenchmarkSetString_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, true)
}

func BenchmarkSetInt_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, false)
}

func BenchmarkSetString_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, true)
}

func BenchmarkSetInt_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, false)
}

func BenchmarkSetString_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, true)
}

func BenchmarkSetInt_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, false)
}

func BenchmarkSetString_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, true)
}

func BenchmarkSetInt_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, false)
}

func BenchmarkSetString_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, true)
}

func BenchmarkSetInt_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, false)
}

func BenchmarkSetString_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, true)
}

func BenchmarkSetInt_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, false)
}

func BenchmarkSetString_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, true)
}

func BenchmarkSetInt_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, false)
}

func BenchmarkSetString_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, true)
}

func BenchmarkSetInt_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, false)
}

func BenchmarkSetString_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, true)
}

func BenchmarkSetInt_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, false)
}

func BenchmarkReSetString_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, true)
}

func BenchmarkReSetInt_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, false)
}

func BenchmarkReSetString_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, true)
}

func BenchmarkReSetInt_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, false)
}

func BenchmarkReSetString_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, true)
}

func BenchmarkReSetInt_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, false)
}

func BenchmarkReSetString_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, true)
}

func BenchmarkReSetInt_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, false)
}

func BenchmarkReSetString_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, true)
}

func BenchmarkReSetInt_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, false)
}

func BenchmarkReSetString_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, true)
}

func BenchmarkReSetInt_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, false)
}

func BenchmarkReSetString_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, true)
}

func BenchmarkReSetInt_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, false)
}

func BenchmarkReSetString_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, true)
}

func BenchmarkReSetInt_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, false)
}

func BenchmarkReSetString_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, true)
}

func BenchmarkReSetInt_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, false)
}

func BenchmarkReSetString_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, true)
}

func BenchmarkReSetInt_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, false)
}

func BenchmarkGetString_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, true)
}

func BenchmarkGetInt_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, false)
}

func BenchmarkGetString_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, true)
}

func BenchmarkGetInt_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, false)
}

func BenchmarkGetString_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, true)
}

func BenchmarkGetInt_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, false)
}

func BenchmarkGetString_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, true)
}

func BenchmarkGetInt_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, false)
}

func BenchmarkGetString_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, true)
}

func BenchmarkGetInt_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, false)
}

func BenchmarkGetString_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, true)
}

func BenchmarkGetInt_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, false)
}

func BenchmarkGetString_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, true)
}

func BenchmarkGetInt_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, false)
}

func BenchmarkGetString_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, true)
}

func BenchmarkGetInt_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, false)
}

func BenchmarkGetString_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, true)
}

func BenchmarkGetInt_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, false)
}

func BenchmarkGetString_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, true)
}

func BenchmarkGetInt_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, false)
}

func BenchmarkGetMissString_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, true)
}

func BenchmarkGetMissInt_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, false)
}

func BenchmarkGetMissString_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, true)
}

func BenchmarkGetMissInt_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, false)
}

func BenchmarkGetMissString_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, true)
}

func BenchmarkGetMissInt_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, false)
}

func BenchmarkGetMissString_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, true)
}

func BenchmarkGetMissInt_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, false)
}

func BenchmarkGetMissString_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, true)
}

func BenchmarkGetMissInt_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, false)
}

func BenchmarkGetMissString_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, true)
}

func BenchmarkGetMissInt_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, false)
}

func BenchmarkGetMissString_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, true)
}

func BenchmarkGetMissInt_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, false)
}

func BenchmarkGetMissString_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, true)
}

func BenchmarkGetMissInt_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, false)
}

func BenchmarkGetMissString_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, true)
}

func BenchmarkGetMissInt_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, false)
}

func BenchmarkGetMissString_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, true)
}

func BenchmarkGetMissInt_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, false)
}

func BenchmarkUnsetString_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, true)
}

func BenchmarkUnsetInt_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, false)
}

func BenchmarkUnsetString_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, true)
}

func BenchmarkUnsetInt_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, false)
}

func BenchmarkUnsetString_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, true)
}

func BenchmarkUnsetInt_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, false)
}

func BenchmarkUnsetString_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, true)
}

func BenchmarkUnsetInt_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, false)
}

func BenchmarkUnsetString_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, true)
}

func BenchmarkUnsetInt_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, false)
}

func BenchmarkUnsetString_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, true)
}

func BenchmarkUnsetInt_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, false)
}

func BenchmarkUnsetString_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, true)
}

func BenchmarkUnsetInt_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, false)
}

func BenchmarkUnsetString_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, true)
}

func BenchmarkUnsetInt_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, false)
}

func BenchmarkUnsetString_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, true)
}

func BenchmarkUnsetInt_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, false)
}

func BenchmarkUnsetString_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, true)
}

func BenchmarkUnsetInt_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, true)
}

func BenchmarkUnsetMissInt_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, false)
}

func BenchmarkUnsetMissString_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, true)
}

func BenchmarkUnsetMissInt_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, false)
}

func BenchmarkUnsetMissString_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, true)
}

func BenchmarkUnsetMissInt_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, false)
}

func BenchmarkUnsetMissString_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, true)
}

func BenchmarkUnsetMissInt_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, false)
}

func BenchmarkUnsetMissString_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, false)
}
