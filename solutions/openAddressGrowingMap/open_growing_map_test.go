
// This file had been automatically generated by utility "git.dx.center/trafficstars/testJob0/internal/benchmarkCodeGen"

package openAddressGrowingMap

import (
	"testing"

	benchmark "git.dx.center/trafficstars/testJob0/internal/benchmarkRoutines"
)

func TestMap(t *testing.T) {
	benchmark.DoTest(t, NewHashMap)
}

func BenchmarkSet_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 16, "int")
}

func BenchmarkSet_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 16, "string")
}

func BenchmarkSet_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 16, "slice")
}

func BenchmarkSet_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 16, "map")
}

func BenchmarkSet_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 16, "struct")
}

func BenchmarkSet_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, "int")
}

func BenchmarkSet_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, "string")
}

func BenchmarkSet_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, "slice")
}

func BenchmarkSet_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, "map")
}

func BenchmarkSet_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 512, "struct")
}

func BenchmarkSet_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 65536, "int")
}

func BenchmarkSet_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 65536, "string")
}

func BenchmarkSet_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 65536, "slice")
}

func BenchmarkSet_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 65536, "map")
}

func BenchmarkSet_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 65536, "struct")
}

func BenchmarkSet_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, "int")
}

func BenchmarkSet_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, "string")
}

func BenchmarkSet_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, "slice")
}

func BenchmarkSet_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, "map")
}

func BenchmarkSet_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16, 1048576, "struct")
}

func BenchmarkSet_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 16, "int")
}

func BenchmarkSet_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 16, "string")
}

func BenchmarkSet_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 16, "slice")
}

func BenchmarkSet_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 16, "map")
}

func BenchmarkSet_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 16, "struct")
}

func BenchmarkSet_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, "int")
}

func BenchmarkSet_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, "string")
}

func BenchmarkSet_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, "slice")
}

func BenchmarkSet_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, "map")
}

func BenchmarkSet_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 512, "struct")
}

func BenchmarkSet_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 65536, "int")
}

func BenchmarkSet_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 65536, "string")
}

func BenchmarkSet_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 65536, "slice")
}

func BenchmarkSet_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 65536, "map")
}

func BenchmarkSet_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 65536, "struct")
}

func BenchmarkSet_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, "int")
}

func BenchmarkSet_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, "string")
}

func BenchmarkSet_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, "slice")
}

func BenchmarkSet_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, "map")
}

func BenchmarkSet_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 64, 1048576, "struct")
}

func BenchmarkSet_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 16, "int")
}

func BenchmarkSet_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 16, "string")
}

func BenchmarkSet_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 16, "slice")
}

func BenchmarkSet_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 16, "map")
}

func BenchmarkSet_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 16, "struct")
}

func BenchmarkSet_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, "int")
}

func BenchmarkSet_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, "string")
}

func BenchmarkSet_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, "slice")
}

func BenchmarkSet_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, "map")
}

func BenchmarkSet_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 512, "struct")
}

func BenchmarkSet_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 65536, "int")
}

func BenchmarkSet_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 65536, "string")
}

func BenchmarkSet_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 65536, "slice")
}

func BenchmarkSet_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 65536, "map")
}

func BenchmarkSet_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 65536, "struct")
}

func BenchmarkSet_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, "int")
}

func BenchmarkSet_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, "string")
}

func BenchmarkSet_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, "slice")
}

func BenchmarkSet_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, "map")
}

func BenchmarkSet_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 128, 1048576, "struct")
}

func BenchmarkSet_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, "int")
}

func BenchmarkSet_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, "string")
}

func BenchmarkSet_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, "slice")
}

func BenchmarkSet_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, "map")
}

func BenchmarkSet_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 512, "struct")
}

func BenchmarkSet_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 65536, "int")
}

func BenchmarkSet_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 65536, "string")
}

func BenchmarkSet_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 65536, "slice")
}

func BenchmarkSet_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 65536, "map")
}

func BenchmarkSet_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 65536, "struct")
}

func BenchmarkSet_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, "int")
}

func BenchmarkSet_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, "string")
}

func BenchmarkSet_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, "slice")
}

func BenchmarkSet_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, "map")
}

func BenchmarkSet_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 1024, 1048576, "struct")
}

func BenchmarkSet_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, "int")
}

func BenchmarkSet_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, "string")
}

func BenchmarkSet_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, "slice")
}

func BenchmarkSet_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, "map")
}

func BenchmarkSet_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 4194304, 1048576, "struct")
}

func BenchmarkSet_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, "int")
}

func BenchmarkSet_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, "string")
}

func BenchmarkSet_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, "slice")
}

func BenchmarkSet_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, "map")
}

func BenchmarkSet_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 16777216, 1048576, "struct")
}

func BenchmarkReSet_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 16, "int")
}

func BenchmarkReSet_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 16, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 16, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 16, "map")
}

func BenchmarkReSet_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 16, "struct")
}

func BenchmarkReSet_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, "int")
}

func BenchmarkReSet_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, "map")
}

func BenchmarkReSet_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 512, "struct")
}

func BenchmarkReSet_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 65536, "int")
}

func BenchmarkReSet_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 65536, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 65536, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 65536, "map")
}

func BenchmarkReSet_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 65536, "struct")
}

func BenchmarkReSet_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, "int")
}

func BenchmarkReSet_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, "map")
}

func BenchmarkReSet_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16, 1048576, "struct")
}

func BenchmarkReSet_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 16, "int")
}

func BenchmarkReSet_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 16, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 16, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 16, "map")
}

func BenchmarkReSet_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 16, "struct")
}

func BenchmarkReSet_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, "int")
}

func BenchmarkReSet_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, "map")
}

func BenchmarkReSet_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 512, "struct")
}

func BenchmarkReSet_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 65536, "int")
}

func BenchmarkReSet_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 65536, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 65536, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 65536, "map")
}

func BenchmarkReSet_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 65536, "struct")
}

func BenchmarkReSet_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, "int")
}

func BenchmarkReSet_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, "map")
}

func BenchmarkReSet_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 64, 1048576, "struct")
}

func BenchmarkReSet_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 16, "int")
}

func BenchmarkReSet_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 16, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 16, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 16, "map")
}

func BenchmarkReSet_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 16, "struct")
}

func BenchmarkReSet_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, "int")
}

func BenchmarkReSet_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, "map")
}

func BenchmarkReSet_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 512, "struct")
}

func BenchmarkReSet_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 65536, "int")
}

func BenchmarkReSet_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 65536, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 65536, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 65536, "map")
}

func BenchmarkReSet_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 65536, "struct")
}

func BenchmarkReSet_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, "int")
}

func BenchmarkReSet_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, "map")
}

func BenchmarkReSet_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 128, 1048576, "struct")
}

func BenchmarkReSet_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, "int")
}

func BenchmarkReSet_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, "map")
}

func BenchmarkReSet_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 512, "struct")
}

func BenchmarkReSet_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 65536, "int")
}

func BenchmarkReSet_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 65536, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 65536, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 65536, "map")
}

func BenchmarkReSet_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 65536, "struct")
}

func BenchmarkReSet_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, "int")
}

func BenchmarkReSet_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, "map")
}

func BenchmarkReSet_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 1024, 1048576, "struct")
}

func BenchmarkReSet_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, "int")
}

func BenchmarkReSet_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, "map")
}

func BenchmarkReSet_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 4194304, 1048576, "struct")
}

func BenchmarkReSet_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, "int")
}

func BenchmarkReSet_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, "string")
}

func BenchmarkReSet_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, "slice")
}

func BenchmarkReSet_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, "map")
}

func BenchmarkReSet_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 16777216, 1048576, "struct")
}

func BenchmarkGet_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 16, "int")
}

func BenchmarkGet_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 16, "string")
}

func BenchmarkGet_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 16, "slice")
}

func BenchmarkGet_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 16, "map")
}

func BenchmarkGet_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 16, "struct")
}

func BenchmarkGet_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, "int")
}

func BenchmarkGet_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, "string")
}

func BenchmarkGet_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, "slice")
}

func BenchmarkGet_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, "map")
}

func BenchmarkGet_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 512, "struct")
}

func BenchmarkGet_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 65536, "int")
}

func BenchmarkGet_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 65536, "string")
}

func BenchmarkGet_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 65536, "slice")
}

func BenchmarkGet_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 65536, "map")
}

func BenchmarkGet_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 65536, "struct")
}

func BenchmarkGet_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, "int")
}

func BenchmarkGet_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, "string")
}

func BenchmarkGet_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, "slice")
}

func BenchmarkGet_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, "map")
}

func BenchmarkGet_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16, 1048576, "struct")
}

func BenchmarkGet_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 16, "int")
}

func BenchmarkGet_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 16, "string")
}

func BenchmarkGet_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 16, "slice")
}

func BenchmarkGet_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 16, "map")
}

func BenchmarkGet_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 16, "struct")
}

func BenchmarkGet_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, "int")
}

func BenchmarkGet_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, "string")
}

func BenchmarkGet_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, "slice")
}

func BenchmarkGet_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, "map")
}

func BenchmarkGet_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 512, "struct")
}

func BenchmarkGet_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 65536, "int")
}

func BenchmarkGet_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 65536, "string")
}

func BenchmarkGet_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 65536, "slice")
}

func BenchmarkGet_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 65536, "map")
}

func BenchmarkGet_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 65536, "struct")
}

func BenchmarkGet_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, "int")
}

func BenchmarkGet_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, "string")
}

func BenchmarkGet_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, "slice")
}

func BenchmarkGet_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, "map")
}

func BenchmarkGet_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 64, 1048576, "struct")
}

func BenchmarkGet_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 16, "int")
}

func BenchmarkGet_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 16, "string")
}

func BenchmarkGet_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 16, "slice")
}

func BenchmarkGet_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 16, "map")
}

func BenchmarkGet_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 16, "struct")
}

func BenchmarkGet_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, "int")
}

func BenchmarkGet_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, "string")
}

func BenchmarkGet_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, "slice")
}

func BenchmarkGet_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, "map")
}

func BenchmarkGet_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 512, "struct")
}

func BenchmarkGet_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 65536, "int")
}

func BenchmarkGet_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 65536, "string")
}

func BenchmarkGet_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 65536, "slice")
}

func BenchmarkGet_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 65536, "map")
}

func BenchmarkGet_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 65536, "struct")
}

func BenchmarkGet_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, "int")
}

func BenchmarkGet_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, "string")
}

func BenchmarkGet_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, "slice")
}

func BenchmarkGet_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, "map")
}

func BenchmarkGet_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 128, 1048576, "struct")
}

func BenchmarkGet_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, "int")
}

func BenchmarkGet_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, "string")
}

func BenchmarkGet_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, "slice")
}

func BenchmarkGet_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, "map")
}

func BenchmarkGet_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 512, "struct")
}

func BenchmarkGet_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 65536, "int")
}

func BenchmarkGet_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 65536, "string")
}

func BenchmarkGet_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 65536, "slice")
}

func BenchmarkGet_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 65536, "map")
}

func BenchmarkGet_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 65536, "struct")
}

func BenchmarkGet_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, "int")
}

func BenchmarkGet_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, "string")
}

func BenchmarkGet_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, "slice")
}

func BenchmarkGet_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, "map")
}

func BenchmarkGet_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 1024, 1048576, "struct")
}

func BenchmarkGet_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, "int")
}

func BenchmarkGet_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, "string")
}

func BenchmarkGet_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, "slice")
}

func BenchmarkGet_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, "map")
}

func BenchmarkGet_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 4194304, 1048576, "struct")
}

func BenchmarkGet_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, "int")
}

func BenchmarkGet_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, "string")
}

func BenchmarkGet_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, "slice")
}

func BenchmarkGet_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, "map")
}

func BenchmarkGet_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 16777216, 1048576, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 16, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 16, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 16, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 16, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 16, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 512, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 65536, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 65536, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 65536, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 65536, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 65536, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16, 1048576, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 16, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 16, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 16, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 16, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 16, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 512, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 65536, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 65536, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 65536, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 65536, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 65536, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 64, 1048576, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 16, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 16, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 16, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 16, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 16, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 512, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 65536, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 65536, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 65536, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 65536, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 65536, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 128, 1048576, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 512, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 65536, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 65536, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 65536, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 65536, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 65536, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 1024, 1048576, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 4194304, 1048576, "struct")
}

func BenchmarkGetMiss_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, "int")
}

func BenchmarkGetMiss_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, "string")
}

func BenchmarkGetMiss_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, "slice")
}

func BenchmarkGetMiss_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, "map")
}

func BenchmarkGetMiss_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 16777216, 1048576, "struct")
}

func BenchmarkUnset_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 16, "int")
}

func BenchmarkUnset_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 16, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 16, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 16, "map")
}

func BenchmarkUnset_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 16, "struct")
}

func BenchmarkUnset_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, "int")
}

func BenchmarkUnset_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, "map")
}

func BenchmarkUnset_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 512, "struct")
}

func BenchmarkUnset_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 65536, "int")
}

func BenchmarkUnset_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 65536, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 65536, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 65536, "map")
}

func BenchmarkUnset_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 65536, "struct")
}

func BenchmarkUnset_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, "int")
}

func BenchmarkUnset_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, "map")
}

func BenchmarkUnset_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16, 1048576, "struct")
}

func BenchmarkUnset_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 16, "int")
}

func BenchmarkUnset_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 16, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 16, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 16, "map")
}

func BenchmarkUnset_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 16, "struct")
}

func BenchmarkUnset_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, "int")
}

func BenchmarkUnset_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, "map")
}

func BenchmarkUnset_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 512, "struct")
}

func BenchmarkUnset_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 65536, "int")
}

func BenchmarkUnset_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 65536, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 65536, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 65536, "map")
}

func BenchmarkUnset_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 65536, "struct")
}

func BenchmarkUnset_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, "int")
}

func BenchmarkUnset_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, "map")
}

func BenchmarkUnset_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 64, 1048576, "struct")
}

func BenchmarkUnset_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 16, "int")
}

func BenchmarkUnset_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 16, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 16, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 16, "map")
}

func BenchmarkUnset_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 16, "struct")
}

func BenchmarkUnset_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, "int")
}

func BenchmarkUnset_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, "map")
}

func BenchmarkUnset_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 512, "struct")
}

func BenchmarkUnset_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 65536, "int")
}

func BenchmarkUnset_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 65536, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 65536, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 65536, "map")
}

func BenchmarkUnset_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 65536, "struct")
}

func BenchmarkUnset_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, "int")
}

func BenchmarkUnset_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, "map")
}

func BenchmarkUnset_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 128, 1048576, "struct")
}

func BenchmarkUnset_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, "int")
}

func BenchmarkUnset_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, "map")
}

func BenchmarkUnset_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 512, "struct")
}

func BenchmarkUnset_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 65536, "int")
}

func BenchmarkUnset_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 65536, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 65536, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 65536, "map")
}

func BenchmarkUnset_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 65536, "struct")
}

func BenchmarkUnset_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, "int")
}

func BenchmarkUnset_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, "map")
}

func BenchmarkUnset_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 1024, 1048576, "struct")
}

func BenchmarkUnset_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, "int")
}

func BenchmarkUnset_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, "map")
}

func BenchmarkUnset_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 4194304, 1048576, "struct")
}

func BenchmarkUnset_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, "int")
}

func BenchmarkUnset_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, "string")
}

func BenchmarkUnset_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, "slice")
}

func BenchmarkUnset_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, "map")
}

func BenchmarkUnset_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 16777216, 1048576, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 16, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 16, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 16, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 16, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize16_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 16, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize16_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 512, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 65536, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 65536, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 65536, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 65536, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize16_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 65536, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize16_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16, 1048576, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 16, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 16, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 16, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 16, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize64_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 16, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize64_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 512, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 65536, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 65536, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 65536, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 65536, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize64_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 65536, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize64_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 64, 1048576, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 16, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 16, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 16, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 16, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize128_keyAmount16(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 16, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize128_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 512, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 65536, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 65536, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 65536, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 65536, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize128_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 65536, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize128_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 128, 1048576, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize1024_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 512, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 65536, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 65536, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 65536, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 65536, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize1024_keyAmount65536(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 65536, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize1024_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 1024, 1048576, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize4194304_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 4194304, 1048576, "struct")
}

func BenchmarkUnsetMiss_intKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, "int")
}

func BenchmarkUnsetMiss_stringKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, "string")
}

func BenchmarkUnsetMiss_sliceKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, "slice")
}

func BenchmarkUnsetMiss_mapKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, "map")
}

func BenchmarkUnsetMiss_structKeyType_blockSize16777216_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 16777216, 1048576, "struct")
}
