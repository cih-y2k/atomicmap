
// This file had been automatically generated by utility "git.dx.center/trafficstars/testJob0/internal/benchmarkCodeGen"

package stupidMap

import (
	"testing"

	benchmark "git.dx.center/trafficstars/testJob0/internal/benchmarkRoutines"
)

func TestMap(t *testing.T) {
	benchmark.DoTest(t, NewHashMap)
}

func BenchmarkSetString_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 0, 512, true)
}

func BenchmarkSetInt_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 0, 512, false)
}

func BenchmarkSetString_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 0, 1048576, true)
}

func BenchmarkSetInt_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfSet(b, NewHashMap, 0, 1048576, false)
}

func BenchmarkReSetString_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 0, 512, true)
}

func BenchmarkReSetInt_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 0, 512, false)
}

func BenchmarkReSetString_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 0, 1048576, true)
}

func BenchmarkReSetInt_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfReSet(b, NewHashMap, 0, 1048576, false)
}

func BenchmarkGetString_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 0, 512, true)
}

func BenchmarkGetInt_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 0, 512, false)
}

func BenchmarkGetString_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 0, 1048576, true)
}

func BenchmarkGetInt_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGet(b, NewHashMap, 0, 1048576, false)
}

func BenchmarkGetMissString_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 0, 512, true)
}

func BenchmarkGetMissInt_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 0, 512, false)
}

func BenchmarkGetMissString_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 0, 1048576, true)
}

func BenchmarkGetMissInt_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfGetMiss(b, NewHashMap, 0, 1048576, false)
}

func BenchmarkUnsetString_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 0, 512, true)
}

func BenchmarkUnsetInt_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 0, 512, false)
}

func BenchmarkUnsetString_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 0, 1048576, true)
}

func BenchmarkUnsetInt_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnset(b, NewHashMap, 0, 1048576, false)
}

func BenchmarkUnsetMissString_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 0, 512, true)
}

func BenchmarkUnsetMissInt_blockSize0_keyAmount512(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 0, 512, false)
}

func BenchmarkUnsetMissString_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 0, 1048576, true)
}

func BenchmarkUnsetMissInt_blockSize0_keyAmount1048576(b *testing.B) {
	benchmark.DoBenchmarkOfUnsetMiss(b, NewHashMap, 0, 1048576, false)
}
